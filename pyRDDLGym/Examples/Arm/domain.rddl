//////////////////////////////////////////////////////////////
//
// TAMP Continuous Finite bi-dimensional Domain fo IPC 2023
//
//
// Task And Motion Planning Problem, where integer data has been included to define the specific coordinates of the cans on the shelfs, which now is finite and bidimensioanal
// Developed by Yuqian Yang, Yoonchang Sung and Fernando Fernandez, 
///////////////////////////////////////////////////////////////


domain can_storage {

  types {
    shelf : object;
    can : object;
     };

  pvariables {

  // Nonfluents: probability constants; int values chosen over real to permit nominalization of integer values for classical planners
    MIN_X(shelf)  	     : { non-fluent, real, default = 0 };
    MIN_Y(shelf) 	     : { non-fluent, real, default = 0 };
    MAX_X(shelf)  	     : { non-fluent, real, default = 10 };
    MAX_Y(shelf) 	     : { non-fluent, real, default = 10 };
    SIZE_X_a	           : { non-fluent, real, default = 1 };
    SIZE_X_c(can)	     : { non-fluent, real, default = 1 };
    SIZE_Y_c(can)	     : { non-fluent, real, default = 1 };
    EPSILON            : {non-fluent, real, default = 1 };

    on-shelf(can,shelf)        : { state-fluent, bool, default = false };
    holding(can)               : { state-fluent, bool, default = false }; 
    arm-free                   : { state-fluent, bool, default = true };
    working-shelf(shelf)       : { state-fluent, bool, default = false };  
    x_position_a               : { state-fluent, real, default = 0 };
    y_position_a               : { state-fluent, real, default = 0 }; //assume is the left most coordinate
    x_position_c(can)          : { state-fluent, real, default = 0 };
    y_position_c(can)          : { state-fluent, real, default = 0 };
    safe-position              : { state-fluent, bool, default = true};

  // Intermediate fluents
    break-extension(can, shelf)         : { interm-fluent, bool}; // returns whether can avoids extension of arm in shelf of the given real size
    break-right-shift(can, shelf)       : { interm-fluent, bool };  // returns whether can avoids right a shift of arm in shelf of the given real size
    break-left-shift(can, shelf)        : {interm-fluent, bool}; // returns whether the can avoids a left shift of the arm in shelf of the given real size 
    put-down-action(can,shelf)          : {interm-fluent, bool};
    pick-up-action(can, shelf)          : {interm-fluent, bool};
    different-can(can, can)             : {interm-fluent, bool}; //returns true if both cans are the same

  // Actions 
    extend-arm                 : { action-fluent, real, default = 0 }; //
    retract-arm                : { action-fluent, real, default = 0 };
    retract-off-shelf          : { action-fluent, bool, default = false };
    right-shift                : { action-fluent, real, default = 0 };
    left-shift	               : { action-fluent, real, default = 0 };
    extend-to-shelf            : { action-fluent, bool, default = false };
    pick-up(can,shelf)         : { action-fluent, bool, default = false };
    put-down(can,shelf)        : { action-fluent, bool, default = false };
    change-shelf(shelf,shelf)  : { action-fluent, bool, default = false };
  };

  cpfs {

    different-can(?c1, ?c2) = if(~(x_position_c(?c1)==x_position_c(?c2) ^ y_position_c(?c1)==y_position_c(?c2))) then true
                              else false;

    break-right-shift(?c, ?s) = if(~(holding(?c))^working-shelf(?s)^on-shelf(?c, ?s)^(x_position_c(?c)>x_position_a)) then //basic
                                  if( //arm crash
                                    (
                                      ( (x_position_a + SIZE_X_a + right-shift)>x_position_c(?c) )^
                                      ( y_position_a>y_position_c(?c) )
                                    )
                                    |
                                    (
                                      [exists_{?c1:can}( //can crash
                                        holding(?c1)^
                                        ( (x_position_c(?c1)+SIZE_X_c(?c1)+ right-shift)>=x_position_c(?c) )^
                                        ( 
                                          ( (( y_position_c(?c1)+SIZE_Y_c(?c1))>y_position_c(?c))^
                                            (( y_position_c(?c1)+SIZE_Y_c(?c1))<=( y_position_c(?c)+SIZE_Y_c(?c))))
                                          |
                                          ( (y_position_c(?c1)<( y_position_c(?c)+SIZE_Y_c(?c)))^
                                            (y_position_c(?c1)>y_position_c(?c)) ) 
                                        )
                                      )]
                                    )
                                  ) then true
                                  else false
                                else false;


    break-left-shift(?c, ?s) = if(~(holding(?c))^working-shelf(?s)^on-shelf(?c, ?s)^(x_position_c(?c)<x_position_a)) then //basic
                                  if( //arm crash
                                    (
                                      ( (x_position_a - left-shift)<(x_position_c(?c)+SIZE_X_c(?c)) )^
                                      ( y_position_a>=y_position_c(?c) )
                                    )
                                    |
                                    (
                                      [exists_{?c1:can}( //can crash
                                        holding(?c1)^
                                        ( (x_position_c(?c1) - left-shift)>=(x_position_c(?c)+SIZE_X_c(?c)) )^
                                        ( 
                                          ( (( y_position_c(?c1)+SIZE_Y_c(?c1))>y_position_c(?c))^
                                            (( y_position_c(?c1)+SIZE_Y_c(?c1))<=( y_position_c(?c)+SIZE_Y_c(?c))))
                                          |
                                          ( (y_position_c(?c1)<( y_position_c(?c)+SIZE_Y_c(?c)))^
                                            (y_position_c(?c1)>y_position_c(?c)) ) 
                                        )
                                      )]
                                    )
                                  ) then true
                                  else false
                                else false;
                                                   

    break-extension(?c, ?s) = if (~holding(?c)^working-shelf(?s)^~safe-position^on-shelf(?c,?s)) then
                                if(
                                  ( ( (y_position_a + extend-arm)>y_position_c(?c) )^ //check y
                                    ( 
                                      (
                                        ( (x_position_a + SIZE_X_a)> x_position_c(?c))^
                                        ( (x_position_a + SIZE_X_a)< (x_position_c(?c) + SIZE_X_c(?c)) )
                                      )
                                      |
                                      (
                                        ( x_position_a> x_position_c(?c))^
                                        ( x_position_a< (x_position_c(?c) + SIZE_X_c(?c)) )
                                      )
                                    ) //check x
                                  ) //if the arm breaks-extension
                                  |
                                  (
                                    [exists_{?c1:can}(
                                      holding(?c1)^
                                      ( ( (y_position_c(?c1) + SIZE_Y_c(?c1) + extend-arm)>y_position_c(?c) )^ //check y
                                        ( 
                                          (
                                            ( (x_position_c(?c1) + SIZE_X_c(?c1))> x_position_c(?c))^
                                            ( (x_position_c(?c1) + SIZE_X_c(?c1))< (x_position_c(?c) + SIZE_X_c(?c)) )
                                          )
                                          |
                                          (
                                            ( x_position_c(?c1)> x_position_c(?c))^
                                            ( x_position_c(?c1)< (x_position_c(?c) + SIZE_X_c(?c)) )
                                          )
                                        ) //check x
                                      )
                                    )]
                                  )
                                ) then true
                                else false
                              else false;

    put-down-action(?c,?s) = 
      if (holding(?c) ^ working-shelf(?s) ^ put-down(?c,?s)^~safe-position)
        then true
      else false;

    pick-up-action(?c, ?s) = 
    if (arm-free ^ pick-up(?c, ?s) ^ working-shelf(?s) ^ on-shelf(?c, ?s) ^ ~safe-position) then
        if (
            ((x_position_a < x_position_c(?c)) ^ ((x_position_a + SIZE_X_a) > x_position_c(?c)))
            | ((x_position_a >= x_position_c(?c)) ^ (x_position_a < (x_position_c(?c) + SIZE_X_c(?c))))
        ) then
            if (
                ((y_position_c(?c) - y_position_a) < EPSILON)
                ^ (~[exists_{?c1:can} (
                    different-can(?c, ?c1) ^
                    (
                        ((y_position_c(?c1) + SIZE_Y_c(?c1)) < y_position_c(?c))
                        ^ ((y_position_c(?c1) + SIZE_Y_c(?c1)) > (y_position_a))
                    ) ^
                    (
                        (
                            (x_position_c(?c1) > x_position_c(?c)) ^ (x_position_c(?c1) < x_position_c(?c) + SIZE_X_c(?c))
                        )
                        | (
                            (x_position_c(?c1) < x_position_c(?c)) ^ (x_position_c(?c1) + SIZE_X_c(?c1) > x_position_c(?c))
                        )
                    )
                )])
            ) then true
            else false
        else false
    else false;

    holding'(?c) = 
        if ([exists_{?s:shelf}(pick-up-action(?c,?s))])
          then true
        else if ([exists_{?s:shelf}(put-down-action(?c,?s))])
          then false
        else holding(?c);

    arm-free' = 
      if ([exists_{?c: can, ?s:shelf} (pick-up-action(?c,?s))])
        then false
      else if ([exists_{?c:can, ?s:shelf}(put-down-action(?c,?s))])
        then true
      else arm-free;

    safe-position' = 
      if (retract-off-shelf)
    		then true
			else if (extend-to-shelf)
				then false
			else safe-position;

    working-shelf'(?s2) =
      if ([exists_{?s1: shelf} (working-shelf(?s1) ^ change-shelf(?s1,?s2)^safe-position)])
        then true
      else if ([exists_{?s1: shelf} (working-shelf(?s2) ^ change-shelf(?s2,?s1)^safe-position)])
        then false
      else working-shelf(?s2);
    
    on-shelf'(?c, ?s) = 
      if (put-down-action(?c,?s))
        then true
      else if (pick-up-action(?c,?s))
        then false
      else on-shelf(?c, ?s);


    x_position_a' = if([exists_{?c:can, ?s:shelf}(break-right-shift(?c,?s)|break-left-shift(?c,?s))]) 
                      then x_position_a
                    else
                      if (
                          [exists_{?s:shelf}(
                            working-shelf(?s)^
                            ( (x_position_a - left-shift)<MIN_X(?s) 
                            | (x_position_a + SIZE_X_a + right-shift)>MAX_X(?s) )
                            |
                            ([exists_{?c:can}(holding(?c)^( (x_position_c(?c) - left-shift)<MIN_X(?s) 
                            | (x_position_c(?c) + SIZE_X_c(?c) + right-shift)>MAX_X(?s) ))])
                          )]
                      ) then x_position_a
                      else
                        x_position_a + right-shift - left-shift;


    y_position_a' = if(retract-off-shelf) then -5 //if not safe position
                    else if (extend-to-shelf) 
                      then if(safe-position) then 0 //if extend from safe-position -> y=0
                           else y_position_a
                    else if ([exists_{?c:can, ?s:shelf}(break-extension(?c, ?s))]) //check break-extension
                      then y_position_a
                    else if ((y_position_a - retract-arm)<0) //check negative retract ->not possible
                      then y_position_a
                    else if ([exists_{?c:can,?s:shelf}(holding(?c)^~safe-position^working-shelf(?s)^
                            (y_position_a + SIZE_Y_c(?c) + extend-arm)>MAX_Y(?s))]) //check limit when holding can
                              then y_position_a
                    else if ([exists_{?s:shelf}(~safe-position^working-shelf(?s)^
                            (y_position_a + extend-arm)>MAX_Y(?s))]) //check limit when not holding can
                              then y_position_a
                    else if (safe-position) then y_position_a
                    else y_position_a + extend-arm - retract-arm;

    x_position_c'(?c) = if(holding'(?c)^~(x_position_a==x_position_a')) then x_position_c(?c) + right-shift - left-shift else x_position_c(?c);
    y_position_c'(?c) = if(holding'(?c)) then y_position_a' else y_position_c(?c);
    };

  reward = 100*([exists_{?s:shelf}([forall_{?c:can}(on-shelf'(?c,?s))])]);

  termination{
      if([exists_{?s:shelf}([forall_{?c:can}(on-shelf(?c,?s))])]) then true
           else false;

  };
  }


